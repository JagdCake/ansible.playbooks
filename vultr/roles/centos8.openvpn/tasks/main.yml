---
- name: install OpenVPN
  yum:
    name: openvpn
    state: installed

# makes sure there is no timezone mismatch when the client
# checks the timestamp on the certificate generated by the server
# prevents certificate's not working
- name: align the server timezone with the client timezone
  timezone:
    name: "{{ my_timezone }}"

# set up a Public Key Infrastructure Certificate Authority
- import_tasks: set_up_pki_ca.yml

- name: transport client's certificate request
  copy:
    src: "/home/{{ username }}/Documents/{{ easyrsa.files[0] }}/pki/reqs/{{ client_entity_name }}.req"
    dest: "/tmp/{{ client_entity_name }}.req"
  register: cert_req

- name: import client's certificate request
  command: ./easyrsa import-req "{{ cert_req.dest }}" "{{ client_entity_name }}"
  args:
    chdir: "/etc/openvpn/{{ easyrsa.files[0] }}"
    creates: "/etc/openvpn/{{ easyrsa.files[0] }}/pki/reqs/{{ client_entity_name }}.req"

- name: sign client's certificate request
  expect:
    command: ./easyrsa sign-req client "{{ client_entity_name }}"
    responses:
      .*Confirm.*:\s$: "yes"
      # note that some of the prompts don't end with whitespace
      # could be changed in a future version
      .*Enter.*ca.key:$: "{{ ca_key_passphrase }}"
  args:
    chdir: "/etc/openvpn/{{ easyrsa.files[0] }}"
    creates: "/etc/openvpn/{{ easyrsa.files[0] }}/pki/issued/{{ client_entity_name }}.crt"

- name: transfer signed certificate to client
  fetch:
    src: "/etc/openvpn/{{ easyrsa.files[0] }}/pki/issued/{{ client_entity_name }}.crt"
    # destination dir must end with a "/"
    # so that the file is fetched into it
    dest: "{{ openvpn_client_dir }}/"
    flat: yes

- name: transfer CA certificate to client
  fetch:
    src: "/etc/openvpn/{{ easyrsa.files[0] }}/pki/ca.crt"
    dest: "{{ openvpn_client_dir }}/"
    flat: yes

- import_tasks: config_vpn_server.yml
...
